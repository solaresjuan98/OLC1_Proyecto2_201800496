/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,10],$V1=[1,23],$V2=[1,22],$V3=[1,18],$V4=[1,19],$V5=[1,21],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,35],$Va=[1,39],$Vb=[1,42],$Vc=[1,46],$Vd=[1,44],$Ve=[1,45],$Vf=[1,48],$Vg=[1,47],$Vh=[1,49],$Vi=[10,22],$Vj=[15,19,38,92,93,94,95],$Vk=[1,85],$Vl=[1,88],$Vm=[1,80],$Vn=[1,81],$Vo=[1,94],$Vp=[1,95],$Vq=[1,87],$Vr=[1,89],$Vs=[1,90],$Vt=[1,91],$Vu=[1,92],$Vv=[1,93],$Vw=[2,15,22,25,49,50,54,55,56,83,87,89,90,91,92,93,94,95],$Vx=[1,119],$Vy=[1,121],$Vz=[1,120],$VA=[1,138],$VB=[1,139],$VC=[1,136],$VD=[1,137],$VE=[1,148],$VF=[1,149],$VG=[1,150],$VH=[1,151],$VI=[1,152],$VJ=[1,153],$VK=[1,154],$VL=[1,155],$VM=[19,33,38,64,74,75,76,77,78,80,81],$VN=[2,14,15,22,25,49,50,54,55,56,82,83,87,89,90,91,92,93,94,95],$VO=[1,171],$VP=[19,33,38,64,74,77,78,80,81],$VQ=[19,33,38,77,78,80,81],$VR=[2,119],$VS=[1,275],$VT=[2,63],$VU=[1,282],$VV=[1,281],$VW=[1,280];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"LIST":4,"EOF":5,"CLASSLIST":6,"INTERFACELIST":7,"FUNCTION_LIST":8,"MAIN_METHOD":9,"token_public":10,"token_static":11,"token_void":12,"token_main":13,"token_left_parenthesis":14,"token_string":15,"token_left_bracket":16,"token_right_bracket":17,"token_args":18,"token_right_parenthesis":19,"token_left_brace":20,"INSTRUCTIONS_LIST":21,"token_right_brace":22,"CLASS":23,"token_class":24,"token_Identifier":25,"METHOD_LIST":26,"INTERFACE":27,"token_interface":28,"LIST_DEC_FUNC":29,"DEC_FUNC":30,"METHOD_DATA_TYPE":31,"PARAMETERS_LIST":32,"token_semicolon":33,"METHOD_IMPLEMENTATION":34,"FUNCTION_DEF":35,"PARAMETER":36,"DATA_TYPE":37,"token_comma":38,"INSTRUCTIONS":39,"VAR_DECLARATION":40,"PRINT_INST":41,"ASSIGNATION":42,"METHOD_CALL":43,"IF":44,"FOR":45,"WHILE":46,"DO_WHILE":47,"RETURN_STATEMENT":48,"token_continue":49,"token_break":50,"DEC_INC":51,"ML_COMMENTARY":52,"SL_COMMENTARY":53,"ml_commentary":54,"sl_commentary":55,"token_System":56,"token_point":57,"token_out":58,"token_print":59,"text_string_qm":60,"token_println":61,"text_string_sq":62,"E":63,"token_plus":64,"CONCAT":65,"METHOD_CALL2":66,"token_equal":67,"token_true":68,"token_false":69,"VAR_LIST":70,"PARAMETER_LIST":71,"EXPR_LIST":72,"EXPR":73,"token_minus":74,"token_asterisk":75,"token_slash":76,"greater_than":77,"less_than":78,"equal":79,"and":80,"or":81,"token_number":82,"token_if":83,"THEN_STMT":84,"THEN_LIST":85,"token_else":86,"token_for":87,"FOR_DEF":88,"token_while":89,"token_do":90,"token_return":91,"token_int":92,"token_char":93,"token_double":94,"token_boolean":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"token_public",11:"token_static",12:"token_void",13:"token_main",14:"token_left_parenthesis",15:"token_string",16:"token_left_bracket",17:"token_right_bracket",18:"token_args",19:"token_right_parenthesis",20:"token_left_brace",22:"token_right_brace",24:"token_class",25:"token_Identifier",28:"token_interface",33:"token_semicolon",38:"token_comma",49:"token_continue",50:"token_break",54:"ml_commentary",55:"sl_commentary",56:"token_System",57:"token_point",58:"token_out",59:"token_print",60:"text_string_qm",61:"token_println",62:"text_string_sq",64:"token_plus",67:"token_equal",68:"token_true",69:"token_false",74:"token_minus",75:"token_asterisk",76:"token_slash",77:"greater_than",78:"less_than",79:"equal",80:"and",81:"or",82:"token_number",83:"token_if",86:"token_else",87:"token_for",89:"token_while",90:"token_do",91:"token_return",92:"token_int",93:"token_char",94:"token_double",95:"token_boolean"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[4,1],[9,13],[6,2],[6,1],[23,6],[7,2],[7,1],[27,6],[29,2],[29,1],[30,7],[26,2],[26,1],[8,2],[8,1],[34,9],[34,1],[35,9],[32,2],[32,1],[32,1],[36,2],[36,3],[21,2],[21,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,2],[39,2],[39,1],[39,1],[39,1],[39,2],[52,2],[53,2],[41,9],[41,9],[41,9],[41,9],[41,9],[41,9],[41,11],[41,11],[41,11],[41,11],[65,3],[65,3],[65,3],[65,3],[65,1],[65,1],[65,0],[40,5],[40,5],[40,5],[40,5],[40,5],[40,3],[40,6],[40,6],[40,6],[40,4],[70,5],[70,5],[70,5],[70,3],[70,4],[70,2],[42,4],[42,4],[42,4],[43,5],[66,4],[72,2],[72,1],[73,1],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,4],[63,4],[63,3],[63,3],[63,3],[63,3],[63,3],[63,1],[63,1],[63,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,1],[71,1],[71,1],[71,1],[71,1],[44,8],[85,2],[85,1],[84,4],[84,9],[84,0],[45,7],[88,4],[51,3],[51,3],[46,7],[47,9],[48,3],[48,3],[48,3],[48,3],[48,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[37,1],[37,1],[37,1],[37,1],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

              this.$ = new Node("LIST", "NON_TERMINAL");
              this.$.addChild($$[$0-1]);
              return this.$;

            
break;
case 2:
this.$ = new Node("CLASSLIST", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 4:
 this.$ = new Node("FUNCTION_LIST", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 6:

                this.$ = new Node("main method", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-12], "public"));
                this.$.addChild(new Node($$[$0-11], "static"));
                this.$.addChild(new Node($$[$0-10], "void"));
                this.$.addChild(new Node($$[$0-9], "main"));
                this.$.addChild(new Node($$[$0-8], "("));
                this.$.addChild(new Node($$[$0-7], "String_"));
                this.$.addChild(new Node($$[$0-6], "["));
                this.$.addChild(new Node($$[$0-5], "]"));
                this.$.addChild(new Node($$[$0-4], "args"));
                this.$.addChild(new Node($$[$0-3], ")"));
                this.$.addChild(new Node($$[$0-2], "{"));
                this.$.addChild($$[$0-1]);
                this.$.addChild(new Node($$[$0], "}"));

            
break;
case 7:

                             this.$ = new Node("CLASSLIST", "NON_TERMINAL"); 
                             this.$.addChild($$[$0-1]);  
                             this.$.addChild($$[$0]);  
                           
break;
case 8:

                    this.$ = new Node("CLASS", "NON_TERMINAL");
                    this.$.addChild($$[$0]);
                 
break;
case 9:
 this.$ = new Node("CLASS_DEF", "NON_TERMINAL");
   this.$.addChild(new Node($$[$0-4], "class")); 
   this.$.addChild(new Node($$[$0-3], "id")); 
   this.$.addChild(new Node($$[$0-2], "{"));
   this.$.addChild($$[$0-1]);
   this.$.addChild(new Node($$[$0], "}"));

 
break;
case 10:

                this.$ = new Node("INTERFACELIST", "NON_TERMINAL"); 
                this.$.addChild($$[$0-1]);
                this.$.addChild($$[$0]); 
            
break;
case 11:

                this.$ = new Node("INTERFACE", "NON_TERMINAL");
                this.$.addChild($$[$0]);
            
break;
case 12:

               this.$ = new Node("INTERFACE", "NON_TERMINAL");
               this.$.addChild(new Node($$[$0-5], "interface"));// don't translate
               this.$.addChild(new Node($$[$0-3], "id_interface"));// don't translate
           
break;
case 13:

                this.$ = new Node("LIST_DEC_FUNC", "NON_TERMINAL"); 
                this.$.addChild($$[$0-1]);
                this.$.addChild($$[$0]); 
             
break;
case 14:

                 this.$.addChild($$[$0]);
             
break;
case 15:

               this.$ = new Node("DEC_FUNC", "NON_TERMINAL"); 
           
break;
case 16:
 
                            this.$ = new Node("METHOD_LIST", "NON_TERMINAL"); 
                            this.$.addChild($$[$0-1]);
                            this.$.addChild($$[$0]);
                          
break;
case 17:

                                    this.$ = new Node("M_IMPL", "NON_TERMINAL");
                                    this.$.addChild($$[$0]);
                                    
break;
case 18:

                this.$ = new Node("FUNCTION_LIST", "NON_TERMINAL"); 
                this.$.addChild($$[$0-1]);
                this.$.addChild($$[$0]);
             
break;
case 19:

                this.$ = new Node("FUNCTION_DEF", "NON_TERMINAL");
                this.$.addChild($$[$0]);
             
break;
case 20:
 
                       this.$ = new Node("PAR", "NON_TERMINAL");  
                       this.$.addChild($$[$0-7]); 
                       this.$ = new Node($$[$0-6], "method_id");
                       this.$.addChild(new Node($$[$0-5], "("));  
                       this.$.addChild($$[$0-4]);
                       this.$.addChild(new Node($$[$0-3], ")"));
                       this.$.addChild(new Node($$[$0-2], "{"));
                       this.$.addChild($$[$0-1]);
                       this.$.addChild(new Node($$[$0], "}"));
                     
break;
case 21:


             this.$ = new Node("MAIN_METHOD", "NON_TERMINAL");
             this.$.addChild($$[$0]);
         
break;
case 22:
 
                       this.$ = new Node("FUNCTION_DEF", "NON_TERMINAL");  
                       this.$.addChild($$[$0-7]); 
                       this.$ = new Node($$[$0-6], "function_id");
                       this.$.addChild(new Node($$[$0-5], "("));  
                       this.$.addChild($$[$0-4]);
                       this.$.addChild(new Node($$[$0-3], ")"));
                       this.$.addChild(new Node($$[$0-2], "{"));
                       this.$.addChild($$[$0-1]);
                       this.$.addChild(new Node($$[$0], "}"));
                     
break;
case 23:
 
                            this.$ = new Node("PAR_LIST", "NON_TERMINAL"); 
                            this.$.addChild($$[$0-1]);
                            this.$.addChild($$[$0]);
                          
break;
case 24:

                             this.$ = new Node("PARAMETER", "NON_TERMINAL");
                             this.$.addChild($$[$0]);
                            
break;
case 25:
console.log(" (PARAMETERS_LIST) Sintax error [ row: " + this._$.first_line + ", column: " + this._$.first_column +" ] ");
break;
case 26:

                                         this.$ = new Node("PAR", "NON_TERMINAL");  
                                         this.$.addChild(new Node("type", "paramater_type"));
                                         //this.$.addChild($$[$0-1]);
                                         this.$.addChild(new Node($$[$0], "id"));                      
                                      
break;
case 27:

                                                     this.$ = new Node("PAR", "NON_TERMINAL");
                                                     this.$.addChild(new Node($$[$0-2], ","));
                                                     this.$.addChild(new Node("type", "paramater_type"));  
                                                     //this.$.addChild($$[$0-1]);
                                                     this.$.addChild(new Node($$[$0], "id"));       
                                                   
break;
case 28:

                                    this.$ = new Node("INST_LIST", "NON_TERMINAL");  
                                    this.$.addChild($$[$0-1]);
                                    this.$.addChild($$[$0]);
                                    //this.$.addChild(new Node($$[$0], "id"));                      
                                
break;
case 29:

                                    this.$ = new Node("INST_LIST", "NON_TERMINAL");  
                                    this.$.addChild($$[$0]);
                                    //this.$.addChild(new Node($$[$02], "id"));       
                                
break;
case 30:
 this.$ = new Node("VAR_LIST", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 31:
 this.$ = new Node("INST_PRINT", "NON_TERMINAL"); this.$.addChild($$[$0]);  
break;
case 32:
 this.$ = new Node("ASSIGNATION", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 33:
 this.$ = new Node("METHOD_CALL", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 34:
 this.$ = new Node("IF", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 35:
 this.$ = new Node("FOR", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 36:
 this.$ = new Node("WHILE", "NON_TERMINAL"); this.$.addChild($$[$0]);
break;
case 37:
 this.$ = new Node("DO_WHILE", "NON_TERMINAL"); this.$.addChild($$[$0]);
break;
case 38:
 this.$ = new Node("RETURN", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 39:

                this.$ = new Node("CONTINUE", "NON_TERMINAL"); 
                this.$.addChild(new Node($$[$0-1], "continue"));
                this.$.addChild(new Node($$[$0], ";"));
             
break;
case 40:
 
                 this.$ = new Node("BREAK", "NON_TERMINAL"); 
                 this.$.addChild(new Node($$[$0-1], "break"));
                 this.$.addChild(new Node($$[$0], ";"));
             
break;
case 41:
this.$ = new Node("DEC_INC", "NON_TERMINAL"); this.$.addChild($$[$0]);
break;
case 42:
 this.$ = new Node("ML_C", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 43:
 this.$ = new Node("SL_C", "NON_TERMINAL"); this.$.addChild($$[$0]); 
break;
case 44:

                  console.log(" (INSTRUCTIONS) Sintax error [ row: " + this._$.first_line + ", column: " + this._$.first_column +" ] ");
                  this.$ = new Node($$[$0-1], "error");
              
break;
case 45:

                    this.$ = new Node("ml_comment", ""); this.$.addChild(new Node($$[$0-1], "ml_comment"));
                
break;
case 46:

                    this.$ = new Node("sl_comment", ""); this.$.addChild(new Node($$[$0-1], "sl_comment"));
                
break;
case 47: case 48:

                this.$ = new Node("print", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-4], "print"));
                this.$.addChild(new Node($$[$0-3], "("));
                this.$.addChild(new Node($$[$0-2], "text_string")); // cambiar
                this.$.addChild(new Node($$[$0-1], ")"));
                this.$.addChild(new Node($$[$0], ";"));
                //this.$ = new Node("PRINT", "print");
            
break;
case 49: case 50:

                this.$ = new Node("print", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-4], "println"));
                this.$.addChild(new Node($$[$0-3], "("));
                this.$.addChild(new Node($$[$0-2], "text_string"));
                this.$.addChild(new Node($$[$0-1], ")"));
                this.$.addChild(new Node($$[$0], ";")); 
           
break;
case 51:

                this.$ = new Node("print", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-4], "print"));
                this.$.addChild(new Node($$[$0-3], "("));
                this.$.addChild($$[$0-2]);
                this.$.addChild(new Node($$[$0-1], ")"));
                this.$.addChild(new Node($$[$0], ";"));
                //this.$.addChild(new Node($$[$0-2], "id")); 
           
break;
case 52:

                this.$ = new Node("print", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-4], "println"));
                this.$.addChild(new Node($$[$0-3], "("));
                this.$.addChild($$[$0-2]);
                this.$.addChild(new Node($$[$0-1], ")"));
                this.$.addChild(new Node($$[$0], ";"));
           
break;
case 53: case 54: case 55:

                this.$ = new Node("print", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-6], "println"));
                this.$.addChild(new Node($$[$0-5], "("));
                this.$.addChild(new Node($$[$0-4], "text_string"));
                this.$.addChild(new Node($$[$0-3], "+"));
                this.$.addChild($$[$0-2]); 
                this.$.addChild(new Node($$[$0-1], ")"));
                this.$.addChild(new Node($$[$0], ";"));
           
break;
case 56:

                this.$ = new Node("print", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-6], "print"));
                this.$.addChild(new Node($$[$0-5], "("));
                this.$.addChild(new Node($$[$0-4], "text_string"));
                this.$.addChild(new Node($$[$0-3], "+"));
                this.$.addChild($$[$0-2]); 
                this.$.addChild(new Node($$[$0-1], ")"));
                this.$.addChild(new Node($$[$0], ";"));
           
break;
case 57: case 58:

            this.$ = new Node("CONCAT", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-2], "text_string"));
            this.$.addChild(new Node($$[$0-1], "+"));
            this.$.addChild($$[$0]);
        
break;
case 59:

            this.$ = new Node("CONCAT", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-2], "id"));//ojo aqui
            this.$.addChild(new Node($$[$0-1], "+"));
            this.$.addChild($$[$0]);
        
break;
case 60:

            this.$ = new Node("CONCAT", "NON_TERMINAL");
            this.$.addChild($$[$0-2]);
            this.$.addChild(new Node($$[$0-1], "+"));
            this.$.addChild($$[$0]);
        
break;
case 61:

            this.$ = new Node("CONCAT", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0], "token_Identifier"));
        
break;
case 62:

            this.$ = new Node("CONCAT", "NON_TERMINAL");
            this.$.addChild($$[$0]);
        
break;
case 63:
/**/
break;
case 64:

                     this.$.addChild(new Node("Type", "NON_TERMINAL"));
                     //this.$.addChild($$[$0-4]);
                     this.$.addChild(new Node($$[$0-3], "id"));
                     this.$.addChild(new Node($$[$0-2], "equal"));
                     this.$.addChild($$[$0-1]);
                     this.$.addChild(new Node($$[$0], ";"));
                 
break;
case 65:

                     this.$.addChild(new Node("Type", "NON_TERMINAL"));
                     this.$.addChild(new Node($$[$0-3], "id"));
                     this.$.addChild(new Node($$[$0-2], "equal"));
                     this.$.addChild(new Node($$[$0-1], "true"));
                     this.$.addChild(new Node($$[$0], ";"));
                
break;
case 66:

                     this.$.addChild(new Node("Type", "NON_TERMINAL"));
                     this.$.addChild(new Node($$[$0-3], "id"));
                     this.$.addChild(new Node($$[$0-2], "equal"));
                     this.$.addChild(new Node($$[$0-1], "false"));
                     this.$.addChild(new Node($$[$0], ";"));
                
break;
case 67: case 68:

                     this.$.addChild(new Node("Type", "NON_TERMINAL"));
                     this.$.addChild(new Node($$[$0-3], "id"));
                     this.$.addChild(new Node($$[$0-2], "equal"));
                     this.$.addChild(new Node($$[$0-1], "text_string"));
                     this.$.addChild(new Node($$[$0], ";"));
                 
break;
case 69:

                     this.$.addChild(new Node("Type", "NON_TERMINAL"));
                     this.$.addChild(new Node($$[$0-1], "id"));
                     this.$.addChild(new Node($$[$0], ";"));
                     
                 
break;
case 70:

                     this.$.addChild(new Node("Type", "NON_TERMINAL"));
                     this.$.addChild(new Node($$[$0-4], "id"));
                     this.$.addChild(new Node($$[$0-3], "equal"));
                     this.$.addChild($$[$0-2]);
                     this.$.addChild(new Node($$[$0-1], ","));
                     this.$.addChild($$[$0]);
                 
break;
case 71: case 72:

                     this.$.addChild(new Node("Type", "NON_TERMINAL"));
                     this.$.addChild(new Node($$[$0-4], "id"));
                     this.$.addChild(new Node($$[$0-3], "equal"));
                     this.$.addChild(new Node($$[$0-2], "text_string"));
                     this.$.addChild(new Node($$[$0-1], ","));
                     this.$.addChild($$[$0]);
                 
break;
case 73:

                     this.$.addChild(new Node("Type", "NON_TERMINAL"));
                     this.$.addChild(new Node($$[$0-2], "id"));
                     this.$.addChild(new Node($$[$0-1], ","));
                     this.$.addChild($$[$0]);
                 
break;
case 74:

            this.$ = new Node("VAR_LIST", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-4], "var_id"));
            this.$.addChild(new Node($$[$0-3], "="));
            this.$.addChild($$[$0-2]);
            this.$.addChild(new Node($$[$0-1], ","));
            this.$.addChild($$[$0]);
        
break;
case 75: case 76:

            this.$ = new Node("VAR_LIST", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-4], "var_id"));
            this.$.addChild(new Node($$[$0-3], "="));
            this.$.addChild(new Node($$[$0-2], "text_string"));
            this.$.addChild(new Node($$[$0-1], ","));
            this.$.addChild($$[$0]);
        
break;
case 77:

            this.$ = new Node("VAR_LIST", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-2], "var_id"));
            this.$.addChild(new Node($$[$0-1], ","));
            this.$.addChild($$[$0]);
        
break;
case 78:

            this.$ = new Node("VAR_LIST", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-3], "var_id"));
            this.$.addChild(new Node($$[$0-2], "="));
            this.$.addChild($$[$0-1]);
            this.$.addChild(new Node($$[$0], ";"));
        
break;
case 79:

            this.$ = new Node("VAR_LIST", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-1], "var_id"));
            this.$.addChild(new Node($$[$0], ";"));
        
break;
case 80:

                this.$ = new Node("Assignation", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-3], "var_id"));
                this.$.addChild(new Node($$[$0-2], "equal"));
                this.$.addChild($$[$0-1]);
                this.$.addChild(new Node($$[$0], ";"));
            
break;
case 81: case 82:

                this.$ = new Node("Assignation", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-3], "var_id"));
                this.$.addChild(new Node($$[$0-2], "equal"));
                this.$.addChild(new Node($$[$0-1], "text_string"));
                this.$.addChild(new Node($$[$0], ";"));
            
break;
case 83:

                this.$ = new Node("method_call", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-4], "method_id"));
                this.$.addChild(new Node($$[$0-3], "("));
                this.$.addChild($$[$0-2]);
                this.$.addChild(new Node($$[$0-1], ")"));
                this.$.addChild(new Node($$[$0], ";"));
                
            
break;
case 84:

                this.$ = new Node("method_call", "NON_TERMINAL");
                this.$.addChild(new Node($$[$0-3], "method_id"));
                this.$.addChild(new Node($$[$0-2], "("));
                this.$.addChild($$[$0-1]);
                this.$.addChild(new Node($$[$0], ")"));
                
            
break;
case 85:
 
                            this.$ = new Node("EXPR_LIST", ""); 
                            this.$.addChild($$[$0-1]);
                            this.$.addChild($$[$0]);
                          
break;
case 86:
 
                this.$ = new Node("EXPR_LIST", "");
                this.$.addChild($$[$0]);
                
break;
case 87:
 
                          this.$ = new Node("EXPR", "NON_TERMINAL");
                          this.$.addChild(new Node("expression", "NON_TERMINAL"));
                          this.$.addChild($$[$0]); 
                            
                        
break;
case 88:
 
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node("+", "plus"));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 89:
 
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node("-", "min"));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 90:
 
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node("*", "mult"));
                    this.$.addChild($$[$0]);
                    
break;
case 91:

                    
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node("/", "div"));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 92:

                    
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node($$[$0-1], ">"));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 93:

                    
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node($$[$0-1], "<"));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 94:

                    
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-3]);
                    this.$.addChild(new Node($$[$0-2], ">"));
                    this.$.addChild(new Node($$[$0-1], "="));
                    console.log($$[$0-1]);
                    this.$.addChild($$[$0]);
                    
                    
break;
case 95:

                    
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-3]);
                    this.$.addChild(new Node($$[$0-2], "<"));
                    this.$.addChild(new Node($$[$0-1], "="));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 96:

                    
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node($$[$0-1], "&&"));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 97:

                    
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node($$[$0-1], "||"));
                    this.$.addChild($$[$0]);
                    
            
break;
case 98:

                    
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node($$[$0-1], "+"));
                    this.$.addChild(new Node($$[$0], "+"));
                    
            
break;
case 99:

                    
                    this.$ = new Node("E", "NON_TERMINAL"); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node($$[$0-1], "-"));
                    this.$.addChild(new Node($$[$0], "-"));
                    
            
break;
case 100:
  
     this.$ = new Node("E", "NON_TERMINAL");
     this.$.addChild(new Node($$[$0-2], "("));
     this.$.addChild($$[$0-1]); 
     this.$.addChild(new Node($$[$0], ")")); 
     
 
break;
case 101:
 this.$ = new Node($$[$0], "number"); 
break;
case 102:
 this.$ = new Node($$[$0], "identifier"); 
break;
case 103:
console.log(" Sintax error [ row: " + this._$.first_line + ", column: " + this._$.first_column +" ] ");
break;
case 104:

                    this.$ = new Node("PARAMETER", "NON_TERMINAL");
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node($$[$0-1], ","));
                    this.$.addChild($$[$0]);
                
break;
case 105:

                    this.$ = new Node("PARAMETER", "NON_TERMINAL");
                    this.$.addChild(new Node($$[$0-2], "true"));
                    this.$.addChild(new Node($$[$0-1], ","));
                    this.$.addChild($$[$0]);
              
break;
case 106:

                    this.$ = new Node("PARAMETER", "NON_TERMINAL");
                    this.$.addChild(new Node($$[$0-2], "false"));
                    this.$.addChild(new Node($$[$0-1], ","));
                    this.$.addChild($$[$0]);
              
break;
case 107: case 108:

                    this.$ = new Node("PARAMETER", "NON_TERMINAL");
                    this.$.addChild(new Node($$[$0-2], "text_string"));
                    this.$.addChild(new Node($$[$0-1], ","));
                    this.$.addChild($$[$0]);
              
break;
case 109:

                    this.$ = new Node("PARAMETER", "NON_TERMINAL");
                    this.$.addChild($$[$0]);
              
break;
case 110:

                    this.$ = new Node("PARAMETER", "NON_TERMINAL");
                    this.$.addChild(new Node($$[$0], "true"));
              
break;
case 111:

                    this.$ = new Node("PARAMETER", "NON_TERMINAL");
                    this.$.addChild(new Node($$[$0], "false"));
              
break;
case 112: case 113:

                    this.$ = new Node("PARAMETER", "NON_TERMINAL");
                    this.$.addChild(new Node($$[$0], "text_string"));
              
break;
case 114:

        this.$ = new Node("if stmt", "NON_TERMINAL");
        this.$.addChild(new Node($$[$0-7], "if"));
        this.$.addChild(new Node($$[$0-6], "("));
        this.$.addChild($$[$0-5]);
        this.$.addChild(new Node($$[$0-4], ")"));
        this.$.addChild(new Node($$[$0-3], "{"));
        this.$.addChild($$[$0-2]);
        this.$.addChild(new Node($$[$0-1], "}"));
        this.$.addChild($$[$0]);
        

    
break;
case 117:

                this.$ = new Node("else stmt", "NON_TERMINAL");
                this.$.addChild( new Node($$[$0-3], "else"));
                this.$.addChild( new Node($$[$0-2], "{"));
                this.$.addChild($$[$0-1]);
                this.$.addChild( new Node($$[$0], "}"));
            
break;
case 118:

            this.$ = new Node("else if stmt", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-8], "else"));
            this.$.addChild(new Node($$[$0-7], "if_"));//else if
            this.$.addChild(new Node($$[$0-6], "("));
            this.$.addChild($$[$0-5]);
            this.$.addChild(new Node($$[$0-4], ")"));
            this.$.addChild(new Node($$[$0-3], "{"));
            this.$.addChild($$[$0-2]);
            this.$.addChild(new Node($$[$0-1], "}"));
            this.$.addChild($$[$0]);
         
break;
case 119:
this.$ = new Node("", "")
break;
case 120:

        this.$ = new Node("for_stmt", "NON_TERMINAL");
        this.$.addChild(new Node($$[$0-6], "for"));
        this.$.addChild(new Node($$[$0-5], "("));
        this.$.addChild($$[$0-4]);
        this.$.addChild(new Node($$[$0-3], ")"));
        this.$.addChild(new Node($$[$0-2], "{"));
        this.$.addChild($$[$0-1]);
        this.$.addChild(new Node($$[$0], "}"));

    
break;
case 121:

            this.$ = new Node("FOR_DEF", "NON_TERMINAL");
            this.$.addChild($$[$0-3]);
            this.$.addChild($$[$0-2]);
            this.$.addChild(new Node($$[$0-1], ";_"));
            this.$.addChild($$[$0]);
            
        
break;
case 122:
 this.$ = new Node("DEC_INC", "");  this.$.addChild(new Node($$[$0-2], "id")); this.$.addChild(new Node($$[$0-1], "+")); this.$.addChild(new Node($$[$0], "+")); 
break;
case 123:
 this.$ = new Node("DEC_INC", ""); this.$.addChild(new Node($$[$0-2], "id")); this.$.addChild(new Node($$[$0-1], "-")); this.$.addChild(new Node($$[$0], "-")); 
break;
case 124:

            this.$ = new Node("while_stmt", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-6], "while"));
            this.$.addChild(new Node($$[$0-5], "("));
            this.$.addChild($$[$0-4]);
            this.$.addChild(new Node($$[$0-3], ")"));
            this.$.addChild(new Node($$[$0-2], "{"));
            this.$.addChild($$[$0-1]);
            this.$.addChild(new Node($$[$0], "}"));
        
break;
case 125:

            this.$ = new Node("do while_stmt", "NON_TERMINAL");
            this.$.addChild(new Node($$[$0-8], "do"));
            this.$.addChild(new Node($$[$0-7], "{"));
            this.$.addChild($$[$0-6]);
            this.$.addChild(new Node($$[$0-5], "}"));
            this.$.addChild(new Node($$[$0-4], "while"));
            this.$.addChild(new Node($$[$0-3], "("));
            this.$.addChild($$[$0-2]);
            this.$.addChild(new Node($$[$0-1], ")"));
            this.$.addChild(new Node($$[$0], ";"));
        
break;
case 126:

                    this.$ = new Node("return", "return"); 
                    this.$.addChild($$[$0-1]); 
                    this.$.addChild(new Node($$[$0], ";"));
                 
break;
case 127:

                    this.$ = new Node("return", "return"); 
                    this.$.addChild(new Node($$[$0-1], "true"));
                    this.$.addChild(new Node($$[$0], ";")); 

                 
break;
case 128:

                    this.$ = new Node("return", "return"); 
                    this.$.addChild(new Node($$[$0-1], "false"));
                    this.$.addChild(new Node($$[$0], ";")); 

                 
break;
case 129: case 130:

                    this.$ = new Node("return", "return"); 
                    this.$.addChild(new Node("text string", "text string"));
                    this.$.addChild(new Node($$[$0], ";")); 

                 
break;
case 131: case 137:
this.$ = new Node("int", "int");
break;
case 132: case 138:
this.$ = new Node("String", "String");
break;
case 133:
this.$ = new Node("void", "void");
break;
case 134: case 140:
this.$ = new Node("char", "char");
break;
case 135: case 139:
this.$ = new Node("double", "double");
break;
case 136: case 141:
this.$ = new Node("boolean", "boolean");
break;
}
},
table: [{3:1,4:2,5:[1,6],6:3,7:4,8:5,10:[1,10],23:7,27:8,35:9},{1:[3]},{5:[1,11]},{5:[2,2],10:[1,13],23:12},{5:[2,3],10:[1,15],27:14},{5:[2,4],10:[1,17],35:16},{5:[2,5]},o($V0,[2,8]),o($V0,[2,11]),o($V0,[2,19]),{12:$V1,15:$V2,24:$V3,28:$V4,31:20,92:$V5,93:$V6,94:$V7,95:$V8},{1:[2,1]},o($V0,[2,7]),{24:$V3},o($V0,[2,10]),{28:$V4},o($V0,[2,18]),{12:$V1,15:$V2,31:20,92:$V5,93:$V6,94:$V7,95:$V8},{25:[1,27]},{25:[1,28]},{25:[1,29]},{25:[2,131]},{25:[2,132]},{25:[2,133]},{25:[2,134]},{25:[2,135]},{25:[2,136]},{20:[1,30]},{20:[1,31]},{14:[1,32]},{9:36,10:$V9,26:33,34:34},{10:$Va,29:37,30:38},{2:$Vb,15:$Vc,32:40,36:41,37:43,38:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{9:36,10:$V9,22:[1,50],34:51},o($Vi,[2,17]),{11:[1,53],12:$V1,15:$V2,31:52,92:$V5,93:$V6,94:$V7,95:$V8},o($Vi,[2,21]),{10:$Va,22:[1,54],30:55},o($Vi,[2,14]),{12:$V1,15:$V2,31:56,92:$V5,93:$V6,94:$V7,95:$V8},{15:$Vc,19:[1,57],36:58,37:43,38:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh},o($Vj,[2,24]),o($Vj,[2,25]),{25:[1,59]},{15:$Vc,37:60,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{25:[2,137]},{25:[2,138]},{25:[2,139]},{25:[2,140]},{25:[2,141]},o($V0,[2,9]),o($Vi,[2,16]),{25:[1,61]},{12:[1,62]},o($V0,[2,12]),o($Vi,[2,13]),{25:[1,63]},{20:[1,64]},o($Vj,[2,23]),o($Vj,[2,26]),{25:[1,65]},{14:[1,66]},{13:[1,67]},{14:[1,68]},{2:$Vk,15:$Vc,21:69,25:$Vl,37:86,39:70,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},o($Vj,[2,27]),{2:$Vb,15:$Vc,32:96,36:41,37:43,38:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{14:[1,97]},{2:$Vb,15:$Vc,32:98,36:41,37:43,38:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{2:$Vk,15:$Vc,22:[1,99],25:$Vl,37:86,39:100,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},o($Vw,[2,29]),o($Vw,[2,30]),o($Vw,[2,31]),o($Vw,[2,32]),o($Vw,[2,33]),o($Vw,[2,34]),o($Vw,[2,35]),o($Vw,[2,36]),o($Vw,[2,37]),o($Vw,[2,38]),{33:[1,101]},{33:[1,102]},o($Vw,[2,41]),o($Vw,[2,42]),o($Vw,[2,43]),{33:[1,103]},{25:[1,104]},{57:[1,105]},{14:[1,107],64:[1,108],67:[1,106],74:[1,109]},{14:[1,110]},{14:[1,111]},{14:[1,112]},{20:[1,113]},{14:$Vx,25:$Vy,60:[1,117],62:[1,118],63:114,68:[1,115],69:[1,116],82:$Vz},{2:$Vk,15:$Vc,25:$Vl,37:86,39:122,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{2:$Vk,15:$Vc,25:$Vl,37:86,39:123,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{15:$Vc,19:[1,124],36:58,37:43,38:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{15:[1,125]},{15:$Vc,19:[1,126],36:58,37:43,38:$Vd,92:$Ve,93:$Vf,94:$Vg,95:$Vh},o($V0,[2,22]),o($Vw,[2,28]),o($Vw,[2,39]),o($Vw,[2,40]),o($Vw,[2,44]),{33:[1,128],38:[1,129],67:[1,127]},{58:[1,130]},{14:$Vx,25:$Vy,60:[1,132],62:[1,133],63:131,82:$Vz},{14:$Vx,25:$Vy,60:$VA,62:$VB,63:135,68:$VC,69:$VD,71:134,82:$Vz},{64:[1,140]},{74:[1,141]},{14:$Vx,25:$Vy,63:142,82:$Vz},{15:$Vc,37:86,40:144,88:143,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{14:$Vx,25:$Vy,63:145,82:$Vz},{2:$Vk,15:$Vc,21:146,25:$Vl,37:86,39:70,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{33:[1,147],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{33:[1,156]},{33:[1,157]},{33:[1,158]},{33:[1,159]},{2:[1,161],14:$Vx,25:$Vy,63:160,82:$Vz},o($VM,[2,101]),o($VM,[2,102]),o($Vw,[2,45]),o($Vw,[2,46]),{20:[1,162]},{16:[1,163]},{33:[1,164]},{14:$Vx,25:$Vy,60:[1,168],62:[1,169],63:165,68:[1,166],69:[1,167],82:$Vz},o($VN,[2,69]),{25:$VO,70:170},{57:[1,172]},{33:[1,173],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{33:[1,174]},{33:[1,175]},{19:[1,176]},{19:[2,109],38:[1,177],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{19:[2,110],38:[1,178]},{19:[2,111],38:[1,179]},{19:[2,112],38:[1,180]},{19:[2,113],38:[1,181]},o($Vw,[2,122]),o($Vw,[2,123]),{19:[1,182],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{19:[1,183]},{14:$Vx,25:$Vy,63:184,82:$Vz},{19:[1,185],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{2:$Vk,15:$Vc,22:[1,186],25:$Vl,37:86,39:100,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},o($Vw,[2,126]),{14:$Vx,25:$Vy,63:187,64:[1,188],82:$Vz},{14:$Vx,25:$Vy,63:189,74:[1,190],82:$Vz},{14:$Vx,25:$Vy,63:191,82:$Vz},{14:$Vx,25:$Vy,63:192,82:$Vz},{14:$Vx,25:$Vy,63:193,79:[1,194],82:$Vz},{14:$Vx,25:$Vy,63:195,79:[1,196],82:$Vz},{14:$Vx,25:$Vy,63:197,82:$Vz},{14:$Vx,25:$Vy,63:198,82:$Vz},o($Vw,[2,127]),o($Vw,[2,128]),o($Vw,[2,129]),o($Vw,[2,130]),{19:[1,199],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{33:[1,200]},{2:$Vk,15:$Vc,21:201,25:$Vl,37:86,39:70,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{17:[1,202]},o($Vi,[2,15]),{33:[1,203],38:[1,204],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{33:[1,205]},{33:[1,206]},{33:[1,207],38:[1,208]},{33:[1,209],38:[1,210]},o($VN,[2,73]),{33:[1,213],38:[1,212],67:[1,211]},{59:[1,214],61:[1,215]},o($Vw,[2,80]),o($Vw,[2,81]),o($Vw,[2,82]),{33:[1,216]},{14:$Vx,25:$Vy,60:$VA,62:$VB,63:135,68:$VC,69:$VD,71:217,82:$Vz},{14:$Vx,25:$Vy,60:$VA,62:$VB,63:135,68:$VC,69:$VD,71:218,82:$Vz},{14:$Vx,25:$Vy,60:$VA,62:$VB,63:135,68:$VC,69:$VD,71:219,82:$Vz},{14:$Vx,25:$Vy,60:$VA,62:$VB,63:135,68:$VC,69:$VD,71:220,82:$Vz},{14:$Vx,25:$Vy,60:$VA,62:$VB,63:135,68:$VC,69:$VD,71:221,82:$Vz},{20:[1,222]},{20:[1,223]},{33:[1,224],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{20:[1,225]},{89:[1,226]},o($VP,[2,88],{75:$VG,76:$VH}),o($VM,[2,98]),o($VP,[2,89],{75:$VG,76:$VH}),o($VM,[2,99]),o($VM,[2,90]),o($VM,[2,91]),o($VQ,[2,92],{64:$VE,74:$VF,75:$VG,76:$VH}),{14:$Vx,25:$Vy,63:227,82:$Vz},o($VQ,[2,93],{64:$VE,74:$VF,75:$VG,76:$VH}),{14:$Vx,25:$Vy,63:228,82:$Vz},o([19,33,38,80,81],[2,96],{64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ}),o([19,33,38,81],[2,97],{64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK}),o($VM,[2,100]),o($VM,[2,103]),{2:$Vk,15:$Vc,22:[1,229],25:$Vl,37:86,39:100,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{18:[1,230]},o($VN,[2,64]),{25:$VO,70:231},o($VN,[2,65]),o($VN,[2,66]),o($VN,[2,67]),{25:$VO,70:232},o($VN,[2,68]),{25:$VO,70:233},{14:$Vx,25:$Vy,60:[1,235],62:[1,236],63:234,82:$Vz},{25:$VO,70:237},o($VN,[2,79]),{14:[1,238]},{14:[1,239]},o($Vw,[2,83]),{19:[2,104]},{19:[2,105]},{19:[2,106]},{19:[2,107]},{19:[2,108]},{2:$Vk,15:$Vc,21:240,25:$Vl,37:86,39:70,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{2:$Vk,15:$Vc,21:241,25:$Vl,37:86,39:70,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{14:$Vx,25:$Vy,63:242,82:$Vz},{2:$Vk,15:$Vc,21:243,25:$Vl,37:86,39:70,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{14:[1,244]},o($VQ,[2,94],{64:$VE,74:$VF,75:$VG,76:$VH}),o($VQ,[2,95],{64:$VE,74:$VF,75:$VG,76:$VH}),o($Vi,[2,20]),{19:[1,245]},o($VN,[2,70]),o($VN,[2,71]),o($VN,[2,72]),{33:[1,247],38:[1,246],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{38:[1,248]},{38:[1,249]},o($VN,[2,77]),{14:$Vx,25:$Vy,60:[1,250],62:[1,251],63:252,82:$Vz},{14:$Vx,25:$Vy,60:[1,253],62:[1,254],63:255,82:$Vz},{2:$Vk,15:$Vc,22:[1,256],25:$Vl,37:86,39:100,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{2:$Vk,15:$Vc,22:[1,257],25:$Vl,37:86,39:100,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{19:[2,121],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{2:$Vk,15:$Vc,22:[1,258],25:$Vl,37:86,39:100,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{14:$Vx,25:$Vy,63:259,82:$Vz},{20:[1,260]},{25:$VO,70:261},o($VN,[2,78]),{25:$VO,70:262},{25:$VO,70:263},{19:[1,264],64:[1,265]},{19:[1,266],64:[1,267]},{19:[1,268],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{19:[1,269],64:[1,270]},{19:[1,271],64:[1,272]},{19:[1,273],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},o($Vw,$VR,{84:274,86:$VS}),o($Vw,[2,120]),o($Vw,[2,124]),{19:[1,276],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},{2:$Vk,15:$Vc,21:277,25:$Vl,37:86,39:70,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},o($VN,[2,74]),o($VN,[2,75]),o($VN,[2,76]),{33:[1,278]},{19:$VT,25:$VU,60:$VV,62:$VW,65:279,66:283},{33:[1,284]},{19:$VT,25:$VU,60:$VV,62:$VW,65:285,66:283},{33:[1,286]},{33:[1,287]},{19:$VT,25:$VU,60:$VV,62:$VW,65:288,66:283},{33:[1,289]},{19:$VT,25:$VU,60:$VV,62:$VW,65:290,66:283},{33:[1,291]},o($Vw,[2,114]),{20:[1,292],83:[1,293]},{33:[1,294]},{2:$Vk,15:$Vc,22:[1,295],25:$Vl,37:86,39:100,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},o($Vw,[2,47]),{19:[1,296]},{64:[1,297]},{64:[1,298]},{14:[1,300],19:[2,61],64:[1,299]},{19:[2,62],64:[1,301]},o($Vw,[2,50]),{19:[1,302]},o($Vw,[2,51]),o($Vw,[2,48]),{19:[1,303]},o($Vw,[2,49]),{19:[1,304]},o($Vw,[2,52]),{2:$Vk,15:$Vc,21:305,25:$Vl,37:86,39:70,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{14:[1,306]},o($Vw,[2,125]),o($Vi,[2,6]),{33:[1,307]},{19:$VT,25:$VU,60:$VV,62:$VW,65:308,66:283},{19:$VT,25:$VU,60:$VV,62:$VW,65:309,66:283},{19:$VT,25:$VU,60:$VV,62:$VW,65:310,66:283},{14:$Vx,25:$Vy,60:$VA,62:$VB,63:135,68:$VC,69:$VD,71:311,82:$Vz},{19:$VT,25:$VU,60:$VV,62:$VW,65:312,66:283},{33:[1,313]},{33:[1,314]},{33:[1,315]},{2:$Vk,15:$Vc,22:[1,316],25:$Vl,37:86,39:100,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{14:$Vx,25:$Vy,63:317,82:$Vz},o($Vw,[2,56]),{19:[2,57]},{19:[2,58]},{19:[2,59]},{19:[1,318]},{19:[2,60]},o($Vw,[2,54]),o($Vw,[2,55]),o($Vw,[2,53]),o($Vw,[2,117]),{19:[1,319],64:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,80:$VK,81:$VL},o([19,64],[2,84]),{20:[1,320]},{2:$Vk,15:$Vc,21:321,25:$Vl,37:86,39:70,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},{2:$Vk,15:$Vc,22:[1,322],25:$Vl,37:86,39:100,40:71,41:72,42:73,43:74,44:75,45:76,46:77,47:78,48:79,49:$Vm,50:$Vn,51:82,52:83,53:84,54:$Vo,55:$Vp,56:$Vq,83:$Vr,87:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Ve,93:$Vf,94:$Vg,95:$Vh},o($Vw,$VR,{84:323,86:$VS}),o($Vw,[2,118])],
defaultActions: {6:[2,5],11:[2,1],21:[2,131],22:[2,132],23:[2,133],24:[2,134],25:[2,135],26:[2,136],45:[2,137],46:[2,138],47:[2,139],48:[2,140],49:[2,141],217:[2,104],218:[2,105],219:[2,106],220:[2,107],221:[2,108],308:[2,57],309:[2,58],310:[2,59],312:[2,60]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Node = require('./TreeNode');
    let error_table = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* blank spaces */
break;
case 1: return 10;
break;
case 2: return 24;
break;
case 3: return 11;
break;
case 4: return 12;
break;
case 5: return 83;
break;
case 6: return 86;
break;
case 7: return 87;
break;
case 8: return 90;
break;
case 9: return 89;
break;
case 10: return 18;
break;
case 11: return 68;
break;
case 12: return 69;
break;
case 13: return 28;
break;
case 14: return 13;
break;
case 15: return 56;
break;
case 16: return 58;
break;
case 17: return 59;
break;
case 18: return 61;
break;
case 19: return 91;
break;
case 20: return 50;
break;
case 21: return 49;
break;
case 22: return 15;
break;
case 23: return 92;
break;
case 24: return 93;
break;
case 25: return 95;
break;
case 26: return 94;
break;
case 27: return 20;
break;
case 28: return 22;
break;
case 29: return 14;
break;
case 30: return 19;
break;
case 31: return 16;
break;
case 32: return 17;
break;
case 33: return 64;
break;
case 34: return 74;
break;
case 35: return 75;
break;
case 36: return 76;
break;
case 37: return 67;
break;
case 38: return 'increase';
break;
case 39: return 'decrease';
break;
case 40: return 80;
break;
case 41: return 81;
break;
case 42: return 'not';
break;
case 43: return 'xor';
break;
case 44: return 78;
break;
case 45: return 77;
break;
case 46: return 'equal_equal';
break;
case 47: return 'different';
break;
case 48: return 33;
break;
case 49: return 38;
break;
case 50: return 57;
break;
case 51: return 60; 
break;
case 52: return 62; 
break;
case 53:return 'string';
break;
case 54: return 82;
break;
case 55: return 'token_decimal';
break;
case 56: return 25;
break;
case 57:/* ignore this */
break;
case 58: return 5;
break;
case 59: console.log('Lexical error: ' + yy_.yytext + ' in line: ' + yy_.yylloc.first_line + ' , in column: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:static\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:args\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:interface\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:String\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:"[^"]*")/,/^(?:'[^"]*')/,/^(?:\/\/\[^\]\*\|\[\]\[\\n\]  %\{ return 'sl_commentary'; %\}\n\\\/\\\*\(\\\*\(\?!\\\/\)\|\[\^\*\]\)\*\\\*\\\/ %\{ return 'ml_commentary'; %\}\n\n\/\* Regular expressions \*\/\n\[[a-zA-Z][a-zA-Z0-9_]*[""])/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[ \t\r\n\f]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
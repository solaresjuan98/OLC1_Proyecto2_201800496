/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,5,9],$V1=[1,19],$V2=[1,20],$V3=[2,14],$V4=[1,21],$V5=[1,32],$V6=[1,31],$V7=[2,9,20],$V8=[1,56],$V9=[1,54],$Va=[1,55],$Vb=[1,58],$Vc=[1,57],$Vd=[1,59],$Ve=[14,18,33,62,63,64,65],$Vf=[1,76],$Vg=[1,79],$Vh=[1,78],$Vi=[1,80],$Vj=[2,14,20,23,41,61,62,63,64,65],$Vk=[1,98],$Vl=[1,100],$Vm=[1,99],$Vn=[1,102],$Vo=[1,106],$Vp=[1,103],$Vq=[1,104],$Vr=[1,105],$Vs=[1,107],$Vt=[1,120],$Vu=[1,121],$Vv=[1,122],$Vw=[1,123],$Vx=[18,40,55,56,57,58],$Vy=[18,40,55,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"LIST":4,"EOF":5,"CLASSLIST":6,"INTERFACELIST":7,"MAIN_METHOD":8,"token_public":9,"token_static":10,"token_void":11,"token_main":12,"token_left_parenthesis":13,"token_string":14,"token_left_bracket":15,"token_right_bracket":16,"token_args":17,"token_right_parenthesis":18,"token_left_brace":19,"token_right_brace":20,"CLASS":21,"token_class":22,"token_Identifier":23,"METHOD_LIST":24,"INTERFACE":25,"token_interface":26,"METHOD_IMPLEMENTATION":27,"METHOD_DATA_TYPE":28,"PARAMETERS_LIST":29,"INSTRUCTIONS_LIST":30,"PARAMETER":31,"DATA_TYPE":32,"token_comma":33,"INSTRUCTIONS":34,"VAR_DECLARATION":35,"PRINT_INST":36,"ASSIGNATION":37,"METHOD_CALL":38,"RETURN_STATEMENT":39,"token_semicolon":40,"token_System":41,"token_point":42,"token_out":43,"token_print":44,"text_string_qm":45,"token_println":46,"token_equal":47,"E":48,"token_true":49,"token_false":50,"VAR_LIST":51,"EXPR":52,"PARAMETER_LIST":53,"EXPR_LIST":54,"token_plus":55,"token_minus":56,"token_asterisk":57,"token_slash":58,"token_number":59,"text_string_sq":60,"token_return":61,"token_int":62,"token_char":63,"token_double":64,"token_boolean":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"token_public",10:"token_static",11:"token_void",12:"token_main",13:"token_left_parenthesis",14:"token_string",15:"token_left_bracket",16:"token_right_bracket",17:"token_args",18:"token_right_parenthesis",19:"token_left_brace",20:"token_right_brace",22:"token_class",23:"token_Identifier",26:"token_interface",33:"token_comma",40:"token_semicolon",41:"token_System",42:"token_point",43:"token_out",44:"token_print",45:"text_string_qm",46:"token_println",47:"token_equal",49:"token_true",50:"token_false",55:"token_plus",56:"token_minus",57:"token_asterisk",58:"token_slash",59:"token_number",60:"text_string_sq",61:"token_return",62:"token_int",63:"token_char",64:"token_double",65:"token_boolean"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[4,1],[8,12],[6,2],[6,1],[21,6],[21,2],[7,2],[7,1],[25,5],[25,1],[24,2],[24,1],[27,9],[27,2],[29,2],[29,1],[29,1],[31,2],[31,3],[30,2],[30,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,2],[36,9],[36,9],[36,9],[35,5],[35,5],[35,5],[35,5],[35,3],[51,5],[51,3],[51,4],[51,2],[37,4],[38,5],[54,2],[54,1],[52,1],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,1],[48,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

              this.$ = new Node("LIST", "");
              this.$.addChild($$[$0-1]);
              return this.$;

            
break;
case 2:
this.$ = new Node("CLASSLIST"); this.$.addChild($$[$0]); 
break;
case 7:

                             this.$ = new Node("CLASSLIST", ""); 
                             this.$.addChild($$[$0-1]);  
                             this.$.addChild($$[$0]);  
                           
break;
case 8:

                    this.$ = new Node("CLASSLIST", "");
                    this.$.addChild($$[$0]);
                 
break;
case 9:
 this.$ = new Node("CLASS_DEF", "CLASS_DEF"); this.$.addChild(new Node($$[$0-3], "id")); this.$.addChild($$[$0-1]); 
break;
case 10:
console.log(" (CLASS) Sintax error [ row: " + this._$.first_line + ", column: " + this._$.first_column +" ] ");
break;
case 14:
console.log(" (INTERFACE) Sintax error [ row: " + this._$.first_line + ", column: " + this._$.first_column +" ] ");
break;
case 15:
 
                            this.$ = new Node("METHOD_LIST", ""); 
                            this.$.addChild($$[$0-1]);
                            this.$.addChild($$[$0]);
                          
break;
case 16:

                                    this.$ = new Node("M_IMPL", "");
                                    this.$.addChild($$[$0]);
                                    
break;
case 17:
 this.$ = new Node("PAR", "");  
                       this.$.addChild($$[$0-7]); 
                       this.$ = new Node($$[$0-6], "id");  
                       this.$.addChild($$[$0-4]);
                       this.$.addChild($$[$0-1]);
                       /*put instructions*/
                     
break;
case 18:
console.log(" (METHOD_DEF) Sintax error [ row: " + this._$.first_line + ", column: " + this._$.first_column +" ] ");
break;
case 19:
 
                            this.$ = new Node("PAR_LIST", ""); 
                            this.$.addChild($$[$0-1]);
                            this.$.addChild($$[$0]);
                          
break;
case 20:

                             this.$ = new Node("PARAMETER", "");
                             this.$.addChild($$[$0]);
                            
break;
case 21:
console.log(" (PARAMETERS_LIST) Sintax error [ row: " + this._$.first_line + ", column: " + this._$.first_column +" ] ");
break;
case 22:

                                         this.$ = new Node("PAR", "");  
                                         this.$.addChild($$[$0-1]);
                                         this.$.addChild(new Node($$[$0], "id"));                      
                                      
break;
case 23:

                                                     this.$ = new Node("PAR", "");  
                                                     this.$.addChild($$[$0-1]);
                                                     this.$.addChild(new Node($$[$0], "id"));       
                                                   
break;
case 24:

                                    this.$ = new Node("INST_LIST", "");  
                                    this.$.addChild($$[$0-1]);
                                    this.$.addChild($$[$0]);
                                    //this.$.addChild(new Node($$[$0], "id"));                      
                                
break;
case 25:

                                    this.$ = new Node("INST_LIST", "");  
                                    this.$.addChild($$[$0]);
                                    //this.$.addChild(new Node($$[$02], "id"));       
                                
break;
case 26:
 this.$ = new Node("VAR_DEC", ""); this.$.addChild($$[$0]); 
break;
case 27:
 this.$ = new Node("INST_PRINT", ""); this.$.addChild($$[$0]);  
break;
case 28:
 this.$ = new Node("ASSIGNATION", ""); this.$.addChild($$[$0]); 
break;
case 29:
 this.$ = new Node("METHOD_CALL", ""); this.$.addChild($$[$0]); 
break;
case 30:
 this.$ = new Node("RETURN", "")
break;
case 31:
console.log(" (INSTRUCTIONS) Sintax error [ row: " + this._$.first_line + ", column: " + this._$.first_column +" ] ");
break;
case 32:

                this.$ = new Node("print", "print");
                this.$.addChild(new Node($$[$0-4], "print"));
                //this.$ = new Node("PRINT", "print");
            
break;
case 35:

                     this.$.addChild(new Node("Type", "type"));
                     this.$.addChild(new Node($$[$0-3], "id"));
                     this.$.addChild(new Node($$[$0-2], "equal"));
                     this.$.addChild($$[$0-1]);
                 
break;
case 36:

                     this.$.addChild(new Node("Type", "type"));
                     this.$.addChild(new Node($$[$0-3], "id"));
                     this.$.addChild(new Node($$[$0-2], "equal"));
                     this.$.addChild(new Node($$[$0-1], "true"));
                 
break;
case 37:

                     this.$.addChild(new Node("Type", "type"));
                     this.$.addChild(new Node($$[$0-3], "id"));
                     this.$.addChild(new Node($$[$0-2], "equal"));
                     this.$.addChild(new Node($$[$0-1], "false"));
                 
break;
case 38:

                     this.$.addChild(new Node("Type", "type"));
                     this.$.addChild(new Node($$[$0-3], "id"));
                     this.$.addChild(new Node($$[$0-2], "equal"));
                     this.$.addChild(new Node($$[$0-1], "text_string"));
                 
break;
case 39:

                     this.$.addChild(new Node("Type", "type"));
                     this.$.addChild(new Node($$[$0-1], "id"));
                     //this.$.addChild(new Node($$[$0], "equal"));
                     //this.$.addChild($$[$01]);
                 
break;
case 44:

                this.$ = new Node("Asgn", "asgn");
                this.$.addChild(new Node("d", "id"));
                this.$.addChild(new Node($$[$0-2], "equal"));
                this.$.addChild($$[$0-1]);

            
break;
case 46:
 
                            this.$ = new Node("EXPR_LIST", ""); 
                            this.$.addChild($$[$0-1]);
                            this.$.addChild($$[$0]);
                          
break;
case 47:
 
                this.$ = new Node("EXPR_LIST", "");
                this.$.addChild($$[$0]);
                
break;
case 48:
 
                          this.$ = new Node("EXPR", "");
                          this.$.addChild(new Node("expression", "expression"));
                          this.$.addChild($$[$0]); 
                            
                        
break;
case 49:
 
                    this.$ = new Node("E", ""); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node("+", "plus"));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 50:
 
                    this.$ = new Node("E", ""); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node("-", "min"));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 51:
 
                    this.$ = new Node("E", ""); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node("*", "mult"));
                    this.$.addChild($$[$0]);
                    
break;
case 52:

                    
                    this.$ = new Node("E", ""); 
                    this.$.addChild($$[$0-2]);
                    this.$.addChild(new Node("/", "div"));
                    this.$.addChild($$[$0]);
                    
                    
break;
case 53:
  this.$ = new Node("E", ""); this.$.addChild($$[$0-1]); 
break;
case 54:
 this.$ = new Node($$[$0], "number"); 
break;
case 55:
 this.$ = new Node($$[$0], "identifier"); 
break;
case 56:
console.log(" Sintax error [ row: " + this._$.first_line + ", column: " + this._$.first_column +" ] ");
break;
case 75: case 81:
this.$ = new Node("int", "int");
break;
case 76: case 82:
this.$ = new Node("String", "String");
break;
case 77:
this.$ = new Node("void", "void");
break;
case 78: case 84:
this.$ = new Node("char", "char");
break;
case 79: case 83:
this.$ = new Node("double", "double");
break;
case 80: case 85:
this.$ = new Node("boolean", "boolean");
break;
}
},
table: [{2:[1,10],3:1,4:2,5:[1,6],6:3,7:4,8:5,9:[1,9],21:7,25:8},{1:[3]},{5:[1,11]},{2:[1,14],5:[2,2],9:[1,13],21:12},{2:[1,17],5:[2,3],9:[1,16],25:15},{5:[2,4]},{5:[2,5]},o($V0,[2,8]),o($V0,[2,12]),{10:[1,18],22:$V1,26:$V2},o($V0,$V3,{20:$V4}),{1:[2,1]},o($V0,[2,7]),{22:$V1},{20:$V4},o($V0,[2,11]),{26:$V2},o($V0,$V3),{11:[1,22]},{23:[1,23]},{23:[1,24]},o($V0,[2,10]),{12:[1,25]},{19:[1,26]},{19:[1,27]},{13:[1,28]},{2:$V5,9:$V6,24:29,27:30},{20:[1,33]},{14:[1,34]},{2:$V5,9:$V6,20:[1,35],27:36},o($V7,[2,16]),{11:[1,40],14:[1,39],28:37,62:[1,38],63:[1,41],64:[1,42],65:[1,43]},{20:[1,44]},o($V0,[2,13]),{15:[1,45]},o($V0,[2,9]),o($V7,[2,15]),{23:[1,46]},{23:[2,75]},{23:[2,76]},{23:[2,77]},{23:[2,78]},{23:[2,79]},{23:[2,80]},o($V7,[2,18]),{16:[1,47]},{13:[1,48]},{17:[1,49]},{2:[1,52],14:$V8,29:50,31:51,32:53,33:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd},{18:[1,60]},{14:$V8,18:[1,61],31:62,32:53,33:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd},o($Ve,[2,20]),o($Ve,[2,21]),{23:[1,63]},{14:$V8,32:64,62:$Va,63:$Vb,64:$Vc,65:$Vd},{23:[2,81]},{23:[2,82]},{23:[2,83]},{23:[2,84]},{23:[2,85]},{19:[1,65]},{19:[1,66]},o($Ve,[2,19]),o($Ve,[2,22]),{23:[1,67]},{20:[1,68]},{2:$Vf,14:$V8,23:$Vg,30:69,32:77,34:70,35:71,36:72,37:73,38:74,39:75,41:$Vh,61:$Vi,62:$Va,63:$Vb,64:$Vc,65:$Vd},o($Ve,[2,23]),{5:[2,6]},{2:$Vf,14:$V8,20:[1,81],23:$Vg,32:77,34:82,35:71,36:72,37:73,38:74,39:75,41:$Vh,61:$Vi,62:$Va,63:$Vb,64:$Vc,65:$Vd},o($Vj,[2,25]),o($Vj,[2,26]),o($Vj,[2,27]),o($Vj,[2,28]),o($Vj,[2,29]),o($Vj,[2,30]),{40:[1,83]},{23:[1,84]},{42:[1,85]},{13:[1,87],47:[1,86]},{23:[1,89],45:[1,92],49:[1,90],50:[1,91],59:[1,88],60:[1,93]},o($V7,[2,17]),o($Vj,[2,24]),o($Vj,[2,31]),{40:[1,95],47:[1,94]},{43:[1,96]},{13:$Vk,23:$Vl,48:97,59:$Vm},{23:$Vn,45:$Vo,49:$Vp,50:$Vq,53:101,59:$Vr,60:$Vs},{40:[1,108]},{40:[1,109]},{40:[1,110]},{40:[1,111]},{40:[1,112]},{40:[1,113]},{13:$Vk,23:$Vl,45:[1,117],48:114,49:[1,115],50:[1,116],59:$Vm},o($Vj,[2,39]),{42:[1,118]},{40:[1,119],55:$Vt,56:$Vu,57:$Vv,58:$Vw},{2:[1,125],13:$Vk,23:$Vl,48:124,59:$Vm},o($Vx,[2,54]),o($Vx,[2,55]),{18:[1,126]},{18:[2,63],33:[1,127]},{18:[2,65],33:[1,128]},{18:[2,66],33:[1,129]},{18:[2,64],33:[1,130]},{18:[2,67],33:[1,131]},{18:[2,68],33:[1,132]},o($Vj,[2,69]),o($Vj,[2,70]),o($Vj,[2,71]),o($Vj,[2,72]),o($Vj,[2,73]),o($Vj,[2,74]),{40:[1,133],55:$Vt,56:$Vu,57:$Vv,58:$Vw},{40:[1,134]},{40:[1,135]},{40:[1,136]},{44:[1,137],46:[1,138]},o($Vj,[2,44]),{13:$Vk,23:$Vl,48:139,59:$Vm},{13:$Vk,23:$Vl,48:140,59:$Vm},{13:$Vk,23:$Vl,48:141,59:$Vm},{13:$Vk,23:$Vl,48:142,59:$Vm},{18:[1,143],55:$Vt,56:$Vu,57:$Vv,58:$Vw},{40:[1,144]},{40:[1,145]},{23:$Vn,45:$Vo,49:$Vp,50:$Vq,53:146,59:$Vr,60:$Vs},{23:$Vn,45:$Vo,49:$Vp,50:$Vq,53:147,59:$Vr,60:$Vs},{23:$Vn,45:$Vo,49:$Vp,50:$Vq,53:148,59:$Vr,60:$Vs},{23:$Vn,45:$Vo,49:$Vp,50:$Vq,53:149,59:$Vr,60:$Vs},{23:$Vn,45:$Vo,49:$Vp,50:$Vq,53:150,59:$Vr,60:$Vs},{23:$Vn,45:$Vo,49:$Vp,50:$Vq,53:151,59:$Vr,60:$Vs},o($Vj,[2,35]),o($Vj,[2,36]),o($Vj,[2,37]),o($Vj,[2,38]),{13:[1,152]},{13:[1,153]},o($Vy,[2,49],{57:$Vv,58:$Vw}),o($Vy,[2,50],{57:$Vv,58:$Vw}),o($Vx,[2,51]),o($Vx,[2,52]),o($Vx,[2,53]),o($Vx,[2,56]),o($Vj,[2,45]),{18:[2,57]},{18:[2,58]},{18:[2,59]},{18:[2,60]},{18:[2,61]},{18:[2,62]},{23:[1,155],45:[1,154]},{45:[1,156]},{18:[1,157]},{18:[1,158]},{18:[1,159]},{40:[1,160]},{40:[1,161]},{40:[1,162]},o($Vj,[2,32]),o($Vj,[2,34]),o($Vj,[2,33])],
defaultActions: {5:[2,4],6:[2,5],11:[2,1],38:[2,75],39:[2,76],40:[2,77],41:[2,78],42:[2,79],43:[2,80],55:[2,81],56:[2,82],57:[2,83],58:[2,84],59:[2,85],68:[2,6],146:[2,57],147:[2,58],148:[2,59],149:[2,60],150:[2,61],151:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Node = require('./TreeNode');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* blank spaces */
break;
case 1: return 9;
break;
case 2: return 22;
break;
case 3: return 10;
break;
case 4: return 11;
break;
case 5: return 'token_if';
break;
case 6: return 'token_else';
break;
case 7: return 'token_for';
break;
case 8: return 'token_do';
break;
case 9: return 'token_while';
break;
case 10: return 17;
break;
case 11: return 49;
break;
case 12: return 50;
break;
case 13: return 26;
break;
case 14: return 12;
break;
case 15: return 41;
break;
case 16: return 43;
break;
case 17: return 44;
break;
case 18: return 46;
break;
case 19: return 61;
break;
case 20: return 'token_break';
break;
case 21: return 'token_continue';
break;
case 22: return 14;
break;
case 23: return 62;
break;
case 24: return 63;
break;
case 25: return 65;
break;
case 26: return 64;
break;
case 27: return 19;
break;
case 28: return 20;
break;
case 29: return 13;
break;
case 30: return 18;
break;
case 31: return 15;
break;
case 32: return 16;
break;
case 33: return 55;
break;
case 34: return 56;
break;
case 35: return 57;
break;
case 36: return 58;
break;
case 37: return 47;
break;
case 38: return 'increase';
break;
case 39: return 'decrease';
break;
case 40: return 'and';
break;
case 41: return 'or';
break;
case 42: return 'not';
break;
case 43: return 'xor';
break;
case 44: return 'less_than';
break;
case 45: return 'greater_than';
break;
case 46: return 'greater_or_equal_than';
break;
case 47: return 'less_or_equal_than';
break;
case 48: return 'equal_equal';
break;
case 49: return 'different';
break;
case 50: return 40;
break;
case 51: return 33;
break;
case 52: return 42;
break;
case 53: return 45; 
break;
case 54: return 60; 
break;
case 55: return 'ml_commentary'; 
break;
case 56:return 'string';
break;
case 57: return 59;
break;
case 58: return 'token_decimal';
break;
case 59: return 23;
break;
case 60:/* ignore this */
break;
case 61: return 5;
break;
case 62: console.log('Lexical error: ' + yy_.yytext + ' in line: ' + yy_.yylloc.first_line + ' , in column: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:public\b)/,/^(?:class\b)/,/^(?:static\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:args\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:interface\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:String\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:<)/,/^(?:>)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:"[^"]*")/,/^(?:'[^"]*')/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/ )/,/^(?:["][a-zA-Z][a-zA-Z0-9_]*[""])/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[ \t\r\n\f]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}